<script>
    var allIngredients = [];
    var ingredients = [];

    //-------------------------------------------------------------------
    //-------------------AUTO COMPLETE CODE FROM W3----------------------
    //-------------------------------------------------------------------
    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function(e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false;}
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                /*create a DIV element for each matching element:*/
                b = document.createElement("DIV");
                /*make the matching letters bold:*/
                b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                b.innerHTML += arr[i].substr(val.length);
                /*insert a input field that will hold the current array item's value:*/
                b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function(e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function(e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } 
            else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } 
            else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
        var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }   
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }

    function noenter() {
        return !(window.event && window.event.keyCode == 13);
    }
    
    function addOption() {
        var inputIngredient = inputBox.value.trim();
        inputIngredient = inputIngredient.replace(/  +/g, ' ');
        console.log(inputIngredient);
        if(inputIngredient !== ""){
            var splitIngredient = inputIngredient.split(" ");
            var newCurrIngredient = "";
            for(let v=0; v < splitIngredient.length; v++){
                var ingredientPart = splitIngredient[v].trim();
                ingredientPart = ingredientPart.toLowerCase();
                ingredientPart = ingredientPart.replace(ingredientPart.charAt(0), ingredientPart.charAt(0).toUpperCase());
                newCurrIngredient = newCurrIngredient + ingredientPart + " ";
            }
            newCurrIngredient = newCurrIngredient.trim();

            //check if value is in the array
            if(!ingredients.includes(newCurrIngredient)){
                listBox.appendChild(new Option(newCurrIngredient,newCurrIngredient));
                ingredients.push(newCurrIngredient);
                console.log("Adding "+newCurrIngredient);
                console.log("Updated ingredients list: "+ingredients);
            }
            inputBox.value = "";
        }
    }

    function removeOption() {
        if(listBox.options[listBox.selectedIndex] !== undefined){
            console.log("Removing "+listBox.options[listBox.selectedIndex].value);
            if(ingredients.includes(listBox.options[listBox.selectedIndex].value)){
                var remove = ingredients.indexOf(listBox.options[listBox.selectedIndex].value);
                ingredients.splice(remove, 1);
            }
            listBox.options[listBox.selectedIndex] = null;
            console.log("Updated ingredients list: "+ingredients);
        }
    }

    window.onload = function(){
        inputBox = document.FormName.inputBox;
        listBox = document.getElementById("listBox");

        document.getElementById("add").onclick = addOption;
        document.getElementById("remove").onclick = removeOption;

        autocomplete(document.getElementById("myInput"), allIngredients);
    }

</script>

<style>
    .autocomplete{
        position: relative;
        display: inline-block;
        width: 300px;
    }

    #myInput{
        width: 300px;
        margin-bottom: -1px !important;
    }

    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 0;
        right: 0;
    }
    .autocomplete-items div {
        padding: 10px;
        cursor: pointer;
        background-color: #fff; 
        border-bottom: 1px solid #d4d4d4; 
    }
    .autocomplete-items div:hover {
        /*when hovering an item:*/
        background-color: #e9e9e9; 
    }
    .autocomplete-active {
    /*when navigating through the items using the arrow keys:*/
        background-color: DodgerBlue !important; 
        color: #ffffff; 
    }
</style>

<div class="container">
    <h1>Submit a recipe</h1>
    <form name="FormName" autocomplete="off">
        <div class="form-group" id="title">
            <label for="exampleInputEmail1">Title</label>
            <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email">
        </div>

        <div id="ingredients">
            rawingredients and measuredingredients --- needs to be parsed on backend<br>
            <div class="autocomplete">
                <input type="text" id="myInput" name="inputBox" size="24" onkeypress="return noenter()" placeholder="e.g. Potato...">
            </div>    
            <button id="add" type="button">Add ></button> 
            <select name="listBox[]" id="listBox" size="4" multiple></select>
            <button id="remove" type="button">Remove</button>
        </div>
        
        <div class="form-group" id="serving">
            <label for="exampleFormControlSelect1">Serving Size</label>
            <select class="form-control" id="exampleFormControlSelect1">
                <option>1</option>
                <option>2</option>
                <option>3</option>
                <option>4</option>
                <option>5</option>
            </select>
        </div>
    
        <div class="form-group" id="instructions">
            <label for="exampleFormControlTextarea1">Instructions</label>
            <textarea class="form-control" id="exampleFormControlTextarea1" rows="3"></textarea>
        </div>

        <div class="form-group" id="image">
            <label for="exampleFormControlFile1">Upload an image for your recipe</label>
            <input type="file" class="form-control-file" id="exampleFormControlFile1">
            <small id="emailHelp" class="form-text text-muted">Optional</small>
        </div>

        <button type="submit">Submit</button>
    </form>
</div>

<div class="container" id="ingredients" style="display: none;">
    {{#each ingredients}}
        <script>
            allIngredients.push('{{this.name}}');
        </script>
        {{this.name}}<br>
    {{/each}}
</div>