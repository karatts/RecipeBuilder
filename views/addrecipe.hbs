<script>
    var allIngredients = [];
    var ingredients = [];

    //-------------------------------------------------------------------
    //-------------------AUTO COMPLETE CODE FROM W3----------------------
    //-------------------------------------------------------------------
    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function(e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false;}
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                /*create a DIV element for each matching element:*/
                b = document.createElement("DIV");
                /*make the matching letters bold:*/
                b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                b.innerHTML += arr[i].substr(val.length);
                /*insert a input field that will hold the current array item's value:*/
                b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function(e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function(e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } 
            else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } 
            else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
        var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }   
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }

    function noenter() {
        return !(window.event && window.event.keyCode == 13);
    }
    
    function addOption() {

        //verify that the value is not all spaces
        if (ifSpaces(inputBox.value)) {
            inputBox.value = "";
        }
        else{
            //verify ingredient and format
            var inputIngredient = inputBox.value.trim();
            inputIngredient = inputIngredient.replace(/  +/g, ' ');
            console.log(inputIngredient);
            if(inputIngredient !== ""){
                var splitIngredient = inputIngredient.split(" ");
                var newCurrIngredient = "";
                for(let v=0; v < splitIngredient.length; v++){
                    var ingredientPart = splitIngredient[v].trim();
                    ingredientPart = ingredientPart.toLowerCase();
                    ingredientPart = ingredientPart.replace(ingredientPart.charAt(0), ingredientPart.charAt(0).toUpperCase());
                    newCurrIngredient = newCurrIngredient + ingredientPart + " ";
                }
                newCurrIngredient = newCurrIngredient.trim();

                //check if value is in the array
                if(!ingredients.includes(newCurrIngredient)){
                    ingredients.push(newCurrIngredient);
                    listBox.appendChild(new Option(newCurrIngredient,newCurrIngredient));
                    console.log("Adding "+newCurrIngredient);
                    console.log("Updated ingredients list: "+ingredients);
                    document.getElementById("listBox").style.display = 'block';
                }
                document.getElementById("measurement").value = '';
                document.getElementById("measurementUnit").selectedIndex=0;
                inputBox.value = "";
            }
        }
    }

    function removeOption() {
        if(listBox.options[listBox.selectedIndex] !== undefined){
            console.log("Removing "+listBox.options[listBox.selectedIndex].value);
            if(ingredients.includes(listBox.options[listBox.selectedIndex].value)){
                var remove = ingredients.indexOf(listBox.options[listBox.selectedIndex].value);
                ingredients.splice(remove, 1);
            }
            listBox.options[listBox.selectedIndex] = null;
            console.log("Updated ingredients list: "+ingredients);
        }
    }

    window.onload = function(){
        inputBox = document.FormName.inputBox;
        listBox = document.getElementById("listBox");

        document.getElementById("add").onclick = addOption;
        document.getElementById("remove").onclick = removeOption;

        autocomplete(document.getElementById("myInput"), allIngredients);
    }

    function ifSpaces(string){
        var spaceString = string;
        if (!string.replace(/\s/g, '').length) {
            console.log('string only contains whitespace (ie. spaces, tabs or line breaks)');
            return true;
        }
        return false;
    }

    function allOptions(selectName){
        document.getElementById("error").style.cssText = "display: none;";
        var valid = true;

        //verify that each field is not empty except for image
        let title = document.getElementById("title");
        let ingred = document.getElementById("listBox").options;
        let serves = document.getElementById("serving");
        let instruct = document.getElementById("instructions");
        console.log("title: " + title.value);
        if(title.value === undefined || ifSpaces(title.value)){
            //check that the title is not just a bunch of spaces...
            valid = false;
        }
        console.log("ingredient length: " + ingred.length);
        if(ingred.length === 0){
            valid = false;
        }
        console.log("serving size: "+serves.value);
        if(serves.value === ""){
            valid = false;
        }
        console.log("instructions: " + instructions.value);
        if(instructions.value === undefined || ifSpaces(instructions.value)){
            valid = false;
        }

        if(valid){
            //select all options
            for(let v = 0; v < document.getElementById("listBox").options.length; v++){
                document.getElementById("listBox").options[v].selected = true;
            }
            document.getElementById("myForm").submit();
        }else{
            document.getElementById("error").style.cssText = "display: inline;";
        }
    }

    function updateRadio(){

        if(document.getElementById("noImage").checked){
            document.getElementById("uploadFile").style.display = 'none';
            document.getElementById("uploadURL").style.display = 'none';
            document.getElementById("imageURLText").value = '';
        }

        if(document.getElementById("imageURL").checked){
            document.getElementById("uploadFile").style.display = 'none';
            document.getElementById("uploadURL").style.display = 'inline-flex';
        }

        if(document.getElementById("imageFile").checked){
            document.getElementById("uploadURL").style.display = 'none';
            document.getElementById("uploadFile").style.display = 'inline-flex';
            document.getElementById("imageURLText").value = '';
        }
    }

</script>

<style>
    .autocomplete{
        position: relative;
        display: inline-block;
        width: 300px;
    }

    #myInput{
        width: 300px;
        height: 50px !important;
        margin-bottom: 0px !important;
        margin-top: 1px !important;
    }

    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 0;
        right: 0;
    }
    .autocomplete-items div {
        padding: 10px;
        cursor: pointer;
        background-color: #fff; 
        border-bottom: 1px solid #d4d4d4; 
    }
    .autocomplete-items div:hover {
        /*when hovering an item:*/
        background-color: #e9e9e9; 
    }
    .autocomplete-active {
    /*when navigating through the items using the arrow keys:*/
        background-color: #be9b7b !important; 
        color: black; 
    }

    #error{
        display: none; 
        color: red;
    }

    body{
        background-image: url(/images/background.jpg);
        background-size: cover;
    }

    #jumbo{
        opacity: 0.96;
        height: 755px;
        width: 65%;
        margin-top: 30px;
        margin-left: 17.5%;
        margin-right: 17.5%;
        overflow: hidden;
        border-radius: 25px;
        padding:22px;
    }

    #insideJumbo{
        overflow: scroll;
        overflow-x: hidden;
        height: 710px;
        padding: 5px;
        width: 105.5%;
        padding-right: 25px;
        font-family: 'Open Sans', sans-serif !important;
    }

    #v3{
        font-family: 'Gaegu', cursive !important;
        font-size: 5rem;
        font-weight: bolder;
    }

    #imageHeader{
        float: right;
    }

    #title{
        width: 90%;
    }

    #measurement{
        width: 90px;
        padding-right: 10px !important;
        padding-left: 2.5% !important;
    }

    #serving{
        width: 90px !important;
        padding-left: 31px !important;
        padding-right: 10px !important;

    }

    #measurementUnit{
        display: inline-flex;
        width: 150px;
        height: 50px;
    }

    label{
        font-weight: bold;
    }

    option{
        display: inline-block;
        background-color: #4b3832;
        margin-right: 5px;
        color: #f9f9f9;
        border-radius: 25px;
        padding-bottom: 4px;
        padding-top: 2px;
        padding-left: 7px;
        padding-right: 7px;
    }
    #listBox{
        display: none;
        width: 105%;
        background-color: transparent;
        border: 0px;
        height: 36px;
        margin-top: 0.5%;
        margin-bottom: 0.5%;
        padding-left: 1%;
    }

    select:active, select:hover, select, select:focus{
    outline: transparent;
    }

    .radio{
        display: block;
        margin-left: 3px;
        margin-right: 3px;
    }

    .radio input[type="radio"]{
        margin: 0 !important;
    }

    .form-check-label{
        padding-left: 3px;
        font-weight: 500;
        margin-left: 7px;
        padding-bottom: 3px;
    }

    .small-text{
        font-size: small;
    }

    .remove-shadow{
        box-shadow: none !important;
        text-shadow: none !important;
    }

    .word{
        padding-left: 98px;
    }

</style>

<div class="container jumbotron" id="jumbo">

    <div id="insideJumbo">
    <div><span id="v3">Submit a Recipe</span><span id="imageHeader"><img src=""></span></div>

    <form name="FormName" autocomplete="off" method="POST" action="" id="myForm">
        <div class="row">
        <div class="form-group col" id="titleDiv">
            <label>Title</label>
            <input type="text" name="title" id="title" aria-describedby="recipeTitle" onkeypress="return noenter()"  placeholder="Recipe Name" required>
        </div>

        <div class="form-group col" id="servingDiv">
            <label>Serving Size</label>
            <input type="number" id="serving" name="serving" min="1">
        </div>

        </div>

        <div id="ingredients" style="height: 58px;">
            <label>Ingredients</label>
            <input type="number" id="measurement" name="measurement" min="0">
            <select class="form-control" id="measurementUnit" name="measurementUnit">
                <option></option>
                <option>teaspoon</option>
                <option>tablespoon</option>
                <option>cup</option>
                <option>fluid oz.</option>
                <option>pint</option>
                <option>quart</option>
                <option>gallon</option>
                <option>ounces</option>
                <option>pounds</option>
            </select>
            <div class="autocomplete form-group">
                <input type="text" id="myInput" name="inputBox" size="24" onkeypress="return noenter()" placeholder="e.g. Potato...">
            </div>    
            <button id="add" type="button" style="margin-top: 0.2%; margin-left: 3px;" class="btn btn-outline-dark remove-shadow">Add</button>
            <button id="remove" type="button" class="btn btn-outline-dark remove-shadow" style="margin-top: 0.2%; margin-left: 3px;">Remove</button>
        </div>
        <div id="inputBoxWords" class="small-text muted-text"><span class="word" style="padding-left: 126px;">#</span><span class="word">Unit</span><span class="word">Ingredient</span></div>
        <div id="ingredientsPT2">
            <select name="listBox" id="listBox" size="1" multiple></select>
        </div>
    
        <div class="form-group" id="instructionsDiv">
            <label>Instructions</label>
            <textarea name="instructions" class="form-control" id="instructions" rows="3" required></textarea>
        </div>

        <div class="form-group" id="image" style="display: block;">
                <label style="margin-right: 15px;">Recipe Image <div class="small-text text-muted">(Optional)</div></label>
                <div class="radio-buttons" style="display: inline-grid;" onclick="updateRadio()">
                <div class="form-check form-check-inline radio" style="margin-top:5px;">
                    <input class="form-check-input" type="radio" name="exampleRadios" id="noImage" value="option3" checked>
                    <label class="form-check-label" for="exampleRadios2">
                        None
                    </label>
                </div>
                <div class="form-check form-check-inline radio">
                    <input class="form-check-input" type="radio" name="exampleRadios" id="imageFile" value="option1">
                    <label class="form-check-label" for="exampleRadios1">
                        Upload File
                    </label>
                </div>
                <div class="form-check form-check-inline radio">
                    <input class="form-check-input" type="radio" name="exampleRadios" id="imageURL" value="option2">
                    <label class="form-check-label" for="exampleRadios2">
                        Image URL
                    </label>
                </div>
            </div>
            <div id="uploadFile" style="display: none; margin-left:100px;">
                <input type="file" class="form-control-file" id="exampleFormControlFile1" style="height: 64px !important;">
            </div>

            <div id="uploadURL" style="display: none; margin-left:100px;">
                {{!-- <input name="recipePhoto" type="file" class="form-control-file" id="recipePhoto"> --}}
                <input type="text" name="imageURL" id="imageURLText" placeholder="Image URL" style="width: 410px;">
            </div>
            
        </div>
        <div>
        <span id="error">
        There was an error processing your recipe!
        </span>
        <span><button type="submit" class="btn btn-outline-dark remove-shadow" onclick="allOptions();" style="float: right;">Submit</button>
        </span></div>
    </form>
</div>
</div>

<div class="container" id="ingredients" style="display: none;">
    {{#each ingredients}}
        <script>
            allIngredients.push('{{this.name}}');
        </script>
        {{!-- {{this.name}}<br> --}}
    {{/each}}
</div>