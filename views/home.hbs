<script>
var ingredients = [];
var allIngredients = [];
var recipes = [];

function addOption() {
    var inputIngredient = inputBox.value.trim();
    inputIngredient = inputIngredient.replace(/  +/g, ' ');
    console.log(inputIngredient);
    if(inputIngredient !== ""){
        var splitIngredient = inputIngredient.split(" ");
        var newCurrIngredient = "";
        for(let v=0; v < splitIngredient.length; v++){
            var ingredientPart = splitIngredient[v].trim();
            ingredientPart = ingredientPart.toLowerCase();
            ingredientPart = ingredientPart.replace(ingredientPart.charAt(0), ingredientPart.charAt(0).toUpperCase());
            newCurrIngredient = newCurrIngredient + ingredientPart + " ";
        }
        newCurrIngredient = newCurrIngredient.trim();

        //check if value is in the array
        if(!ingredients.includes(newCurrIngredient)){
            listBox.appendChild(new Option(newCurrIngredient,newCurrIngredient));
	        ingredients.push(newCurrIngredient);
            console.log("Adding "+newCurrIngredient);
            console.log("Updated ingredients list: "+ingredients);


            updateSuggestions();
        }
        inputBox.value = "";
    }
}

function removeOption() {
    if(listBox.options[listBox.selectedIndex] !== undefined){
        console.log("Removing "+listBox.options[listBox.selectedIndex].value);
        if(ingredients.includes(listBox.options[listBox.selectedIndex].value)){
            var remove = ingredients.indexOf(listBox.options[listBox.selectedIndex].value);
            ingredients.splice(remove, 1);
            updateSuggestions();
        }
	    listBox.options[listBox.selectedIndex] = null;
        console.log("Updated ingredients list: "+ingredients);
    }
}

function updateSuggestions(){

    //hide all recipes
    for(let u = 0; u < document.getElementsByClassName("recipe").length; u++){
        document.getElementsByClassName("recipe")[u].style.cssText = "display: none;";
        document.getElementById("reveal").style.cssText = "display: none;";
    }

    console.log("Updating suggestions...");
    // return recipes that contain the ingredients you listed 
    // but may have ingredients you're missing
    console.log("looking for recipes with "+ingredients);

    var weHave = [];
    for(let k = 0; k < ingredients.length; k++){
        var currIngredient = ingredients[k];
        if(allIngredients.includes(currIngredient)){
            weHave.push(currIngredient);
        }
    }
    console.log(weHave);

    // check all recipes for these ingredients
    // if it contains one of the ingredients listed, continue to next recipe
    for(let j = 0; j < recipes.length; j++){
        var currRecIngredients = recipes[j].ingredients;
        var name = recipes[j].title;
        console.log(name);
        console.log(document.getElementsByName(name)[0]);
        console.log('Show recipes with some ingredients: '+document.getElementById('someRecipes').checked);
        console.log('Show recipes with all ingredients: '+document.getElementById('allRecipes').checked);
        if(document.getElementById('someRecipes').checked){
            for(let o = 0; o < weHave.length; o++){
                if(currRecIngredients.includes(weHave[o])){                
                    document.getElementById("reveal").style.cssText = "display: block;";
                    document.getElementsByName(name)[0].style.cssText = "display: block;";
                }
            }
        }
        else{
            var haveAll = true;
            for(let p = 0; p < currRecIngredients.length; p++){
                if(!weHave.includes(currRecIngredients[p])){
                    haveAll = false;
                }
            }
            if(haveAll){
                document.getElementById("reveal").style.cssText = "display: block;";
                document.getElementsByName(name)[0].style.cssText = "display: block;";
            }
        }
    }
}

// --------------- CHANGE LAYOUT OF PAGE ---------------
function submit() {
    //find matching recipes
    //reveal recipes...
    document.getElementById("jumbo").style.display = 'none';
    document.getElementById("links").style.marginTop = '15px';
    document.getElementById("reveal").style.height ='750px';
    document.getElementById("insideReveal").style.height = '720px';
    document.getElementById("reset").style.display = 'inline-block';
    document.getElementById("linkDiv").style.marginLeft = '-10%';
}

function reset(){
    document.getElementById("jumbo").style.display = 'block';
    document.getElementById("links").style.marginTop = '0px';
    document.getElementById("reveal").style.height ='260px';
    document.getElementById("insideReveal").style.height = '230px';
    document.getElementById("reset").style.display = 'none';
    document.getElementById("linkDiv").style.marginLeft = '0px';
}

window.onload = function() {
	inputBox = document.FormName.inputBox;
	listBox = document.getElementById("listBox");

	document.getElementById("add").onclick = addOption;
	document.getElementById("remove").onclick = removeOption;
    document.getElementById("submit").onclick = submit;
    document.getElementById("allRecipes").onclick = updateSuggestions;
    document.getElementById("someRecipes").onclick = updateSuggestions;

    console.log(allIngredients);
    console.log(recipes);

    autocomplete(document.getElementById("myInput"), allIngredients);
}

function noenter() {
  return !(window.event && window.event.keyCode == 13);
}

//-------------------------------------------------------------------
//-------------------AUTO COMPLETE CODE FROM W3----------------------
//-------------------------------------------------------------------
function autocomplete(inp, arr) {
    /*the autocomplete function takes two arguments,
    the text field element and an array of possible autocompleted values:*/
    var currentFocus;
    /*execute a function when someone writes in the text field:*/
    inp.addEventListener("input", function(e) {
        var a, b, i, val = this.value;
        /*close any already open lists of autocompleted values*/
        closeAllLists();
        if (!val) { return false;}
        currentFocus = -1;
        /*create a DIV element that will contain the items (values):*/
        a = document.createElement("DIV");
        a.setAttribute("id", this.id + "autocomplete-list");
        a.setAttribute("class", "autocomplete-items");
        /*append the DIV element as a child of the autocomplete container:*/
        this.parentNode.appendChild(a);
        /*for each item in the array...*/
        for (i = 0; i < arr.length; i++) {
            /*check if the item starts with the same letters as the text field value:*/
            if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
            /*create a DIV element for each matching element:*/
            b = document.createElement("DIV");
            /*make the matching letters bold:*/
            b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
            b.innerHTML += arr[i].substr(val.length);
            /*insert a input field that will hold the current array item's value:*/
            b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
            /*execute a function when someone clicks on the item value (DIV element):*/
                b.addEventListener("click", function(e) {
                    /*insert the value for the autocomplete text field:*/
                    inp.value = this.getElementsByTagName("input")[0].value;
                    /*close the list of autocompleted values,
                    (or any other open lists of autocompleted values:*/
                    closeAllLists();
                });
                a.appendChild(b);
            }
        }
    });
    /*execute a function presses a key on the keyboard:*/
    inp.addEventListener("keydown", function(e) {
        var x = document.getElementById(this.id + "autocomplete-list");
        if (x) x = x.getElementsByTagName("div");
        if (e.keyCode == 40) {
            /*If the arrow DOWN key is pressed,
            increase the currentFocus variable:*/
            currentFocus++;
            /*and and make the current item more visible:*/
            addActive(x);
        } 
        else if (e.keyCode == 38) { //up
            /*If the arrow UP key is pressed,
            decrease the currentFocus variable:*/
            currentFocus--;
            /*and and make the current item more visible:*/
            addActive(x);
        } 
        else if (e.keyCode == 13) {
            /*If the ENTER key is pressed, prevent the form from being submitted,*/
            e.preventDefault();
            if (currentFocus > -1) {
                /*and simulate a click on the "active" item:*/
                if (x) x[currentFocus].click();
            }
        }
    });
    function addActive(x) {
        /*a function to classify an item as "active":*/
        if (!x) return false;
        /*start by removing the "active" class on all items:*/
        removeActive(x);
        if (currentFocus >= x.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = (x.length - 1);
        /*add class "autocomplete-active":*/
        x[currentFocus].classList.add("autocomplete-active");
    }
    function removeActive(x) {
        /*a function to remove the "active" class from all autocomplete items:*/
        for (var i = 0; i < x.length; i++) {
            x[i].classList.remove("autocomplete-active");
        }
    }
    function closeAllLists(elmnt) {
        /*close all autocomplete lists in the document,
        except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
        for (var i = 0; i < x.length; i++) {
            if (elmnt != x[i] && elmnt != inp) {
                x[i].parentNode.removeChild(x[i]);
            }
        }
    }   
    /*execute a function when someone clicks in the document:*/
    document.addEventListener("click", function (e) {
        closeAllLists(e.target);
    });
}

//CONVERT HTML ENCODING BACK TO NORMAL TEXT
var decodeHTML = function (html) {
	var txt = document.createElement('textarea');
	txt.innerHTML = html;
	return txt.value;
};

</script>

<style>
.autocomplete{
    position: relative;
    display: inline-block;
    width: 300px;
}

.autocomplete-items {
  position: absolute;
  border: 1px solid #d4d4d4;
  border-bottom: none;
  border-top: none;
  z-index: 99;
  /*position the autocomplete items to be the same width as the container:*/
  top: 100%;
  left: 0;
  right: 0;
  width: 85%;
  margin-left: 2.5%;
}
.autocomplete-items div {
  padding: 10px;
  cursor: pointer;
  background-color: #fff; 
  border-bottom: 1px solid #d4d4d4; 
}
.autocomplete-items div:hover {
  /*when hovering an item:*/
  background-color: #e9e9e9; 
}
.autocomplete-active {
  /*when navigating through the items using the arrow keys:*/
  background-color: #be9b7b !important; 
  color: black; 
}

.recipe{
    display: none;
    margin-top: 2px;
}

h1{
    font-family: 'Quicksand', sans-serif !important;
}

header{
    display: none !important;
}

#logo{
    margin-top: 5%;
    margin-bottom: 10px;
}

.above-search{
    font-size: larger;
    margin-top: -15px;
    font-weight: bold;
    margin-bottom: 0px;
}

#myInput{
    width: 90%;
    margin-bottom: 0px !important;
}
.add{
    margin-left: -8%;
    padding-top: 1%;
}

option{
    display: inline-block;
    background-color: #4b3832;
    margin-right: 5px;
    color: #f9f9f9;
    border-radius: 25px;
    padding-bottom: 4px;
    padding-top: 2px;
    padding-left: 7px;
    padding-right: 7px;
}
#listBox{
    width: 100%;
    background-color: transparent;
    border: 0px;
    height: 36px;
    margin-top: 0.5%;
    margin-bottom: 0.5%;
    padding-left: 13%;
}

select:active, select:hover, select, select:focus{
  outline: transparent;
}

body{
    background-image: url(/images/background.png);
    background-size: cover;
}

#jumbo{
    margin-top: 3%;
    margin-bottom: 15px;
    padding-top: 20px;
    padding-bottom: 20px;
    opacity: 0.95;
    margin-left: 2.5%;
    margin-right: 2.5%;
    border-radius: 25px;
}

#reveal{
    opacity: 0.95;
    height: 260px;
    display: none;
    margin-left: 2.5%;
    margin-right: 2.5%;
    border-radius: 25px;
    padding: 15px;
    width: auto;
    overflow-x: hidden;
}

#insideReveal{
    overflow: scroll;
    overflow-x: hidden;
    height: 230px;
    width: 103.5%;
    padding-right: 25px;
}

#links{
    opacity: 0.95;
    overflow: hidden;
    height: 50px;
    margin-left: 2.5%;
    margin-right: 2.5%;
    border-radius: 25px;
    padding: 6px;
    width: auto;
    margin-bottom: 15px;
}

.radio{
    display: block;
}

.radio input[type="radio"]{
    margin: 0 !important;
}

.form-check-label{
    padding-left: 6px;
    font-weight: 500;
    margin-left: 7px;
    padding-bottom: 3px;
}

.btn-outline-dark:hover{
    box-shadow: none;
    text-shadow: none;
}

input[type='radio']{ 
    transform: scale(2); 
}

.card.mb-3.col-6.recipeCards{
    width:100%; 
    min-width: 47%; 
    margin: 5px;
    background-color: transparent;
    border: 0px;
}

.card-body{
    margin-left: 7px !important;
    padding-top: 4% !important;
    
}

.recipeLink.container {
    height: auto;
}

.recipeLink{
    padding-left: 12%;
}
</style>

<div class="jumbotron" id="jumbo">
    <div class="row" id="logo">
        <div class="col-1"></div>
        <div class="col-10"><img src="../images/Logo.png" style="width:100%;"></div>
        <div class="col-1"></div>
    </div>
    <form id="myIngredients" name="FormName" autocomplete="off">
        <div class="row">
            <div class="col-2"></div>
            <div class="col-9"><h1 class="text-muted above-search">The ingredients and leftovers I have are . . .</h1></div>
            <div class="col-1"></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="autocomplete col-8">
                <input type="text" id="myInput" name="inputBox" size="24" onkeypress="return noenter()" placeholder="e.g. Potato">
            </div>                 
            <div class="col-2 add" style="margin-top: 0.2%;"><button id="add" type="button" class="btn btn-outline-dark">Add</button><button id="remove" type="button" class="btn btn-outline-dark" style="margin-left: 10px;">Remove</button></div>
        </div>
        <div class="row">
            <div class="col-4"></div>
            <div class="form-check form-check-inline radio col-2">
                <input class="form-check-input" type="radio" name="exampleRadios" id="someRecipes" value="option1" checked>
                <label class="form-check-label" for="exampleRadios1">
                    Some Ingredients
                </label>
            </div>
            <div class="form-check form-check-inline radio col-2">
                <input class="form-check-input" type="radio" name="exampleRadios" id="allRecipes" value="option2">
                <label class="form-check-label" for="exampleRadios2">
                    ALL Ingredients
                </label>
            </div>
        </div>
        <div class="row">
            <div class="col-12"><select name="listBox" id="listBox" size="1" multiple></select></div>
        </div>
        <div class="row">
            <div class="col-2"></div>
            <div class="col-10"></div>
        </div>
    </form>
</div>

<div class="container jumbotron" id="links">
    <div class="row" style="margin: 0px; padding: 0px;">
        <div class="col-4" style="margin: 0px; padding: 0px;"></div>
        <div class="col" style="margin: 0px; padding: 0px;" id="linkDiv">
            <button id="submit" class="btn btn-outline-dark" style="margin-left: 5%;">Find My Recipes!</button>
            <button id="addRec" class="btn btn-outline-dark" style="margin-left: 5px;" onclick="window.location='/addrecipe';">Add A Recipe!</button>
            <button id="reset" class="btn btn-outline-dark" style="margin-left: 5px; display: none;" onclick="reset();">Change My Ingredients</button>
        </div>
    </div>
</div>

		
<div class="container jumbotron" id="reveal">
    <div id="insideReveal">
    <div class="container" id="ingredients" style="display: none;">
        {{#each ingredients}}
            <script>
                allIngredients.push('{{this.name}}');
            </script>
        {{/each}}
    </div>

    <div>
        <div class="container row card-group" id="recipes">
            {{#each recipes}}
            <script>
                var recipeIngredients = [];
            </script>
            <div class="recipe card mb-3 col-6 recipeCards" name='{{this.title}}'>
                <div class="row no-gutters">
                <div class="recImage col-md-5"><img src="{{this.image}}" style="border-radius: 50%; height:200px; width: 200px;">
                <div class="recipeLink"><a href="/recipes/{{this.slug}}">Check out the recipe!</a></div></div>
                <div class="col-md-7"><h3>{{this.title}}</h3>
                <div class="rec-ingredients card-body">
                    This recipe includes:<br>
                    <ul>
                    {{#each this.rawingredients}}
                    <li>{{this}}</li>
                    <script>
                        recipeIngredients.push('{{this}}');
                    </script>
                    {{/each}}
                    </ul>
                </div>
                </div>
            </div>
            </div>
            <script>
                var decoded = decodeHTML('{{this.title}}');
                recipes[{{@index}}] = {title: decoded, ingredients: recipeIngredients}
            </script>
            {{/each}}
        </div>
    </div>
    </div>
</div>

<div style="height: 50px;"></div>